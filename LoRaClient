/*
  LoRa Simple Client for Arduino :
  Support Devices: LoRa Shield + Arduino 

  It is designed to Send data to Ddragino LG01-P
  User need to use the modified RadioHead library from:
  https://github.com/dragino/RadioHead

  modified 11/12/2018
  by Jason Lau
  Singapore Polytechnic
*/

#include <SPI.h>
#include <RH_RF95.h>
#include "DHT.h" // YOU NEED THE ADAFRUIT DHT LIBRARY (https://github.com/adafruit/DHT-sensor-library) TO WORK 

// DHT
#define DHTPIN A0
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);

// Singleton instance of the radio driver
RH_RF95 rf95;
float frequency = 433.0;

void setup()
{
  Serial.begin(9600);
  //while (!Serial) ; // Wait for serial port to be available
  Serial.println("Start LoRa Client");
  if (!rf95.init())
    Serial.println("init failed");
  // Setup ISM frequency
  rf95.setFrequency(frequency);
  // Setup Power,dBm
  rf95.setTxPower(13);

  // Setup Spreading Factor (6 ~ 12)
  rf95.setSpreadingFactor(7);

  // Setup BandWidth, option: 7800,10400,15600,20800,31200,41700,62500,125000,250000,500000
  //Lower BandWidth for longer distance.
  rf95.setSignalBandwidth(125000);

  // Setup Coding Rate:5(4/5),6(4/6),7(4/7),8(4/8)
  rf95.setCodingRate4(5);

  // Setup DHT sensor
  dht.begin();
}

void loop()
{
  delay(2000); // Wait a few seconds between measurements, minimum 2000ms
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  if (isnan(h) || isnan(t))
  {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  // Creates a payload that looks like "25.6,70.5", temperature first, humidity second
  String tmp_buf = String(t);
  String hum_buf = String(h);
  String payload = tmp_buf + ",";
  payload = payload + hum_buf;

  Serial.println(payload);

  Serial.println("Sending to LoRa Server");
  // Send the payload to LoRa Server
  rf95.send(payload.c_str(), payload.length() + 1); // +1 due to null termination

  rf95.waitPacketSent();
  // Now wait for a reply
  uint8_t buf[RH_RF95_MAX_MESSAGE_LEN];
  uint8_t len = sizeof(buf);

  if (rf95.waitAvailableTimeout(3000))
  {
    // Should be a reply message for us now
    if (rf95.recv(buf, &len))
    {
      Serial.print("got reply: ");
      Serial.println((char *)buf);
      Serial.print("RSSI: ");
      Serial.println(rf95.lastRssi(), DEC);
    }
    else
    {
      Serial.println("recv failed");
    }
  }
  else
  {
    Serial.println("No reply, is LoRa server running?");
  }
  delay(5000);
}
